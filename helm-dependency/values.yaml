## --------------------------------------------------------------------------------------
sonatype-nexus:
  nexusProxy:
    enabled: true
    env:
      nexusDockerHost: docker.inf.com
      nexusHttpHost: nexus.inf.com
  ingress:
    enabled: true
  ## To use an additional service, set enable to true
  service:
    enabled: false
## --------------------------------------------------------------------------------------
mariadb:
  ## https://github.com/bitnami/charts/blob/master/bitnami/mariadb/values.yaml
  service:
    ## Kubernetes service type, ClusterIP and NodePort are supported at present
    type: NodePort
    # clusterIp:
    #   master: xx.xx.xx.xx
    #   slave: xx.xx.xx.xx
    port: 3306
    ## Specify the nodePort value for the LoadBalancer and NodePort service types.
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    nodePort:
      master: 30001
      slave: 30002
  ## MariaDB admin credentials
  rootUser:
    ## MariaDB admin password
    ## ref: https://github.com/bitnami/bitnami-docker-mariadb#setting-the-root-password-on-first-run
    password: "admin123"
    ## Option to force users to specify a password. That is required for 'helm upgrade' to work properly.
    ## If it is not force, a random password will be generated.
    forcePassword: true
    ## Mount admin password as a file instead of using an environment variable
    injectSecretsAsVolume: true
  ## Custom user/db credentials
  db:
    ## MariaDB username and password
    ## ref: https://github.com/bitnami/bitnami-docker-mariadb#creating-a-database-user-on-first-run
    user: "stone"
    password: "stone123"
    ## Database to create
    ## ref: https://github.com/bitnami/bitnami-docker-mariadb#creating-a-database-on-first-run
    name: INF
    ## Option to force users to specify a password. That is required for 'helm upgrade' to work properly.
    ## If it is not force, a random password will be generated.
    forcePassword: true
    ## Mount user password as a file instead of using an environment variable
    injectSecretsAsVolume: true
  ## Replication configuration
  replication:
    ## Enable replication. This enables the creation of replicas of MariaDB. If false, only a
    ## master deployment would be created
    enabled: false
  ## side-car prometheus exporter
  metrics:
    enabled: true
## --------------------------------------------------------------------------------------
jenkins:
  master:
    imagePullPolicy: "IfNotPresent"
    adminPassword: "admin123"
    ## List of plugins to install in addition to those listed in master.installPlugins
    #additionalPlugins:
      #- blueocean:lts
      #- prometheus:lts
    ingress:
      enabled: true
      ## configures the hostname e.g. jenkins.example.com
      hostName: workflow.inf.com
    ## Expose Prometheus metrics
    #prometheus:
      ## If enabled, add the prometheus plugin to the list of plugins to install
      ## https://plugins.jenkins.io/prometheus
      #enabled: false
      ## Set a custom namespace where to deploy ServiceMonitor resource
      #serviceMonitorNamespace: default
## --------------------------------------------------------------------------------------
prometheus:
  server:
    enabled: true
    name: prometheus-server
    ingress:
      ## If true, Prometheus server Ingress will be created
      enabled: false
      ## Prometheus server Ingress annotations
      annotations:
        kubernetes.io/ingress.class: nginx
        kubernetes.io/tls-acme: 'true'
      ## Prometheus server Ingress hostnames with optional path
      ## Must be provided if Ingress is enabled
      hosts:
        - prometheus.inf.com
        #- domain.com/prometheus
## --------------------------------------------------------------------------------------
grafana:
  adminUser: admin
  adminPassword: admin123
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    hosts:
      - grafana.inf.com
  ## Configure grafana datasources
  ## ref: http://docs.grafana.org/administration/provisioning/#datasources
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://prometheus-server
          access: proxy
          isDefault: true
  ## Configure grafana dashboard providers
  ## ref: http://docs.grafana.org/administration/provisioning/#dashboards
  ## `path` must be /var/lib/grafana/dashboards/<provider_name>
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default
  ## Configure grafana dashboard to import
  ## NOTE: To use dashboards you must also enable/configure dashboardProviders
  ## ref: https://grafana.com/dashboards
  ## dashboards per provider, use provider name as key.
  dashboards:
    default:
      kube-cluster:
        ## https://grafana.com/dashboards/10512
        gnetId: 10512
        revision: 1
        datasource: Prometheus
      cluster-monitoring-for-kubernetes:
        ## https://grafana.com/grafana/dashboards/10000
        gnetId: 10000
        revision: 1
        datasource: Prometheus
      kubernetes-deployment-statefulset-daemonset-metrics:
        ## https://grafana.com/grafana/dashboards/8588
        gnetId: 8588
        revision: 1
        datasource: Prometheus
      k8s-cluster-summary:
        ## https://grafana.com/grafana/dashboards/8685
        gnetId: 8685
        revision: 1
        datasource: Prometheus
      kubernetes-horizontal-pod-autoscaler:
        ## https://grafana.com/grafana/dashboards/10257
        gnetId: 10257
        revision: 1
        datasource: Prometheus
      kubernetes-app-metrics:
        ## https://grafana.com/grafana/dashboards/1471
        gnetId: 1471
        revision: 1
        datasource: Prometheus
      nginx-ingress:
        ## K8s에서 제공하는 대시보드 가져다 사용함
        ## https://github.com/kubernetes/ingress-nginx/blob/master/deploy/grafana/dashboards/nginx.json
        url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/grafana/dashboards/nginx.json
        ## 아래 설정은 K8s에서 제공하는 대시보드 설정을 그라파나 대시보드 사이트에 업로드 해서 사용하는거 같음
        ## https://grafana.com/grafana/dashboards/10516
        #gnetId: 10516
        #revision: 1
        #datasource: Prometheus
      kube-deployment:
        ## https://grafana.com/dashboards/10515
        gnetId: 10515
        revision: 1
        datasource: Prometheus
## --------------------------------------------------------------------------------------
